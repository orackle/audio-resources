---
// Base shell for all pages.
// - sets html lang, meta, and links global styles
// - renders a simple header with top-level nav
// - provides a "skip to content" link for a11y
const { title = 'The Cue Sheet', description = 'Clean, fast cheat sheets for audio engineers & musicians.' } = Astro.props;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content={description} />
    <title>{title}</title>
    <style>
      /* Smooth theme transition */
      html {
        transition: background-color 0.3s ease, color 0.3s ease;
      }
      
      /* Theme toggle styles */
      .theme-toggle-container {
        display: flex;
        align-items: center;
        margin-left: var(--space-2);
      }
      
      #theme-toggle {
        --size: 36px;
        width: var(--size);
        height: var(--size);
        padding: 0;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
      }
      
      #theme-toggle:hover {
        background: var(--surface-2);
        transform: rotate(15deg);
      }
      
      #theme-toggle:active {
        transform: scale(0.95) rotate(15deg);
      }
      
      .theme-icon {
        position: absolute;
        width: 1.25rem;
        height: 1.25rem;
        transition: opacity 0.3s ease, transform 0.3s ease;
        pointer-events: none;
      }
      
      /* Light theme - show sun */
      :root:not([data-theme="dark"]) .moon-icon {
        opacity: 0;
        transform: scale(0.8) rotate(90deg);
      }
      
      :root:not([data-theme="dark"]) .sun-icon {
        opacity: 1;
        transform: scale(1) rotate(0);
      }
      
      /* Dark theme - show moon */
      :root[data-theme="dark"] .sun-icon {
        opacity: 0;
        transform: scale(0.8) rotate(-90deg);
      }
      
      :root[data-theme="dark"] .moon-icon {
        opacity: 1;
        transform: scale(1) rotate(0);
      }
      
      /* System preference - respect system theme */
      @media (prefers-color-scheme: dark) {
        :root:not([data-theme]) .sun-icon {
          opacity: 0;
          transform: scale(0.8) rotate(-90deg);
        }
        
        :root:not([data-theme]) .moon-icon {
          opacity: 1;
          transform: scale(1) rotate(0);
        }
      }
      
      .sr-only {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border-width: 0;
      }
    </style>

    {/* global styles - global.css imports all other CSS files */}
    <link rel="stylesheet" href="/src/styles/global.css" />

  </head>
  <script>
    // I check saved theme; if none, I leave it to system preference handled in CSS.
    try {
      const saved = localStorage.getItem('theme');
      if (saved === 'light' || saved === 'dark') {
        document.documentElement.setAttribute('data-theme', saved);
      }
    } catch {}
  </script>
  <body>
    <a class="skip" href="#main">Skip to content</a>

    <header class="site-header">
      <a class="brand" href="/">The Cue Sheet</a>
      <nav class="topnav" aria-label="Primary">
        <a href="/audio">Audio</a>
        <a href="/theory">Theory</a>
        <a href="/daws">DAWs</a>
        <a href="/workflows">Workflows</a>
        <a href="/favorites">Favorites</a>
      </nav>
      <div class="theme-toggle-container">
        <button 
          class="button ghost icon" 
          id="theme-toggle" 
          aria-label="Toggle theme" 
          title="Toggle theme"
        >
          <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.75" stroke-linecap="round" stroke-linejoin="round" class="theme-icon sun-icon">
            <circle cx="12" cy="12" r="5"></circle>
            <line x1="12" y1="1" x2="12" y2="3"></line>
            <line x1="12" y1="21" x2="12" y2="23"></line>
            <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
            <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
            <line x1="1" y1="12" x2="3" y2="12"></line>
            <line x1="21" y1="12" x2="23" y2="12"></line>
            <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
            <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
          </svg>
          <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.75" stroke-linecap="round" stroke-linejoin="round" class="theme-icon moon-icon">
            <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
          </svg>
          <span class="sr-only" id="theme-label">Toggle theme</span>
        </button>
      </div>
      
    </header>

    <main id="main" class="container">
      <slot />
    </main>

    <footer class="site-footer">
      <small>© {new Date().getFullYear()} • Minimal. Fast. Useful.</small>
    </footer>

    <script>
      // Theme toggle functionality with smooth transitions
      document.addEventListener('DOMContentLoaded', () => {
        const html = document.documentElement;
        const btn = document.getElementById('theme-toggle');
        const label = document.getElementById('theme-label');
        
        // Get current theme from localStorage or system preference
        const getTheme = () => {
          const saved = localStorage.getItem('theme');
          if (saved === 'light' || saved === 'dark') return saved;
          return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
        };
        
        // Set theme with transition
        const setTheme = (theme) => {
          // Start transition
          const isDark = theme === 'dark';
          html.style.transition = 'background-color 0.3s ease, color 0.3s ease';
          
          // Set the theme
          html.setAttribute('data-theme', theme);
          if (isDark) {
            html.classList.add('dark');
          } else {
            html.classList.remove('dark');
          }
          
          // Save preference
          try {
            localStorage.setItem('theme', theme);
          } catch (e) {
            console.warn('Could not save theme preference:', e);
          }
          
          // Update ARIA label
          if (label) {
            label.textContent = isDark ? 'Switch to light mode' : 'Switch to dark mode';
          }
          
          // Dispatch event for any other components that need to know about theme changes
          window.dispatchEvent(new CustomEvent('theme-change', { detail: { theme } }));
        };
        
        // Toggle between light and dark
        const toggleTheme = () => {
          const currentTheme = getTheme();
          setTheme(currentTheme === 'dark' ? 'light' : 'dark');
        };
        
        // Initialize theme
        setTheme(getTheme());
        
        // Add event listener to the button
        if (btn) {
          btn.addEventListener('click', toggleTheme);
        }
        
        // Listen for system theme changes
        const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
        mediaQuery.addEventListener('change', (e) => {
          // Only apply system theme if no explicit preference is set
          if (!localStorage.getItem('theme')) {
            setTheme(e.matches ? 'dark' : 'light');
          }
        });
      });
    </script>
  </body>
</html>
